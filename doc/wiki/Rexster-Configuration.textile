Rexster is configured through an "XML configuration file":http://github.com/tinkerpop/rexster/blob/master/src/main/resources/com/tinkerpop/rexster/rexster.xml with overriding [[command line|Command Line]] options.  Configuration for Rexster consist of options for server settings like ports and caching and the list of available graphs served by Rexster with their allowed [[Extensions]].

By default, Rexster will first try to read @rexster.xml@ from the root of the working directory.  If it cannot be found there, it will load the @rexster.xml@ sample as a resource.  To use a file other than those two, simply specify the file with @-c@ on the [[Command Line]] at start:

```text
rexster.sh -s -c my-rexster.xml
```

h1. XML Configuration

The XML configuration file has a basic structure as follows:

```xml
<?xml version="1.0" encoding="UTF-8"?>
<rexster>
  <rexster-server-port>8182</rexster-server-port>
  <rexster-server-host>0.0.0.0</rexster-server-host>
  <rexster-shutdown-port>8183</rexster-shutdown-port>
  <rexster-shutdown-host>127.0.0.1</rexster-shutdown-host>
  <rexpro-server-port>8184</rexpro-server-port>
  <rexpro-session-max-idle>1790000</rexpro-session-max-idle>
  <rexpro-session-check-interval>3000000</rexpro-session-check-interval>
  <base-uri>http://localhost</base-uri>
  <web-root>public</web-root>
  <character-set>UTF-8</character-set>
  <security>
    <authentication>
        <type>default</type>
        <configuration>
          <users>
            <user>
              <username>rexster</username>
              <password>rexster</password>
            </user>
          </users>
        </configuration>
    </authentication>
  </security>
  <graphs>
    <graph>
      <graph-name>gratefulgraph</graph-name>
      <graph-type>com.tinkerpop.rexster.config.TinkerGraphGraphConfiguration</graph-type>
      <graph-location>data/graph-example-2.xml</graph-location>
      <graph-read-only>false</graph-read-only>
      <extensions>
        <allows>
          <allow>tp:frames</allow>
        </allows>
      </extensions>
    </graph>
    ...
  </graphs>
</rexster>
```

The @<rexster-server-port>@ and @<rexster-server-host>@ allows configuration of the port and host on which Rexster will serve.  The @<rexster-shutdown-port>@ and @<rexster-shutdown-host>@ allows configuration of the port and host on which Rexster will accept shutdown requests.  The @<rexpro-server-port>@ represents the port on which the [[Rexster Console]] communicates to the Rexster server.  This port utilizes RexPro, short for Rexster Protocol, which is a binary protocol.  

The @<rexpro-session-max-idle>@ specifies the number of milliseconds that a RexPro session can stay idle before the session is destroyed.  If this value is not specified, the default value of thirty minutes is used.  The <rexpro-session-check-interval> specifies the number of milliseconds between session idle checks.  If this value is not specified, the default value of 50 minutes is used.  In both cases, neither value can be set to anything less than one second.

The @<base-uri>@ defines the prefix for the URI that the Dog House will use for connecting to Rexster services.  If this value is not specified, it will default to @http://localhost@.  If this value is pointed at @http://localhost@, it is important to note that the Dog House will not be accessible from browsers other than the one on the local machine.  To allow browsers on remote machines to connect, consider using the IP address of the machine that Rexster is installed upon. Furthermore, in standalone mode, Rexster assumes that both servers are being served through the same base URI in the same instance of Grizzly on different ports. 

The @<web-root>@ allows specification of the directory where the root of administration web site web site exists.  The @<character-set>@ configures the character set the request/response from Rexster REST services will support.  If it is not specified then the Rexster will revert to ISO-8859-1.  Rexster will also respect the @Accept-Charset@ request header and revert back to the value of @<character-set>@ if the header is not specified.

[[Rexster Security]] is managed through the @<security>@ element. By default it is configured to be set to @none@ as in:

```xml
<security>
  <authentication>
    <type>none</type>
  </authentication>
</security>
```

When configured in this fashion, Rexster accepts all incoming requests.  The other option for configuration is @default@ which requires the inclusion of the @<configuration>@ element, as in:

```xml
<security>
  <authentication>
    <type>default</type>
    <configuration>
      <users>
        <user>
          <username>rexster</username>
          <password>rexster</password>
        </user>
      </users>
    </configuration>
  </authentication>
</security>
```

The @<users>@ element allows specification of one or more @<user>@ child elements which each must contain a @<username>@ and @<password>@ combination.  These @<user>@ elements represent the list of users that will have access to Rexster.  

The @<graphs>@ element will contain any number of @<graph>@ configurations.  Each @<graph>@ element will equate to one graph being configured within Rexster.  The exact contents of the @<graph>@ element is dependent upon the type of graph implementation ("OrientDB":http://www.orientechnologies.com/, "neo4j":http://neo4j.org/, etc.) utilized.  However, some key general rules exist for all graph configurations

* The @<graph-name>@ element must be unique within the list of configured graphs.  
* The @<graph-enabled>@ element may be applied to any @<graph>@.  Setting its contents to "false" will prevent that graph from loading to Rexster.  If the element is not present at all (or set explicitly to true) the graph will be loaded.
* The @<graph-type>@ element is the full name of a class that implements the @GraphConfiguration@ interface.  The @GraphConfiguration@ is responsible for using the properties supplied to it from the configuration file to produce a fully configured @Graph@ instance.  This approach allows a plug-in approach to providing new support for Graph implementations without requiring access to Rexster code.  Please read the configuration options specific to each graph type below for more information on the expected values for this element.
* The @<graph-read-only>@ element will configure a graph so that its data cannot be modified.  Set to true to enable this feature.  If the element is not present graphs will default this value to false.
* The @<extensions>@ element defines the [[Extensions]] to be exposed for this graph.   Within @<extensions>@ there are two other elements: @<allows>@ and @<extension>@.
** The @<allows>@ element defines a collection of @<allow>@ elements where each contains the Extensions that are to be exposed for this graph.  The value of the @<allow>@ is an expression that consists of a namespace and extension name separated by a colon, as in @namespace:extension@.  Wildcards are allowed where one wishes to configure all extensions in all namespaces identified by Rexster as denoted by @*:*@ and where one wishes to configure all extensions within a given namespace as denoted by @namespace:*@.
** Zero or more @<extension>@ elements may exists within @<extensions>@.  The purpose of this element is to pass graph specific configuration options to the Extension.  These configurations will be Extension specific so be sure to check the individual configuration options for that Extension.  There are three expected elements within an @<extension>@ element: @<namespace>@, @<name>@ and @<configuration>@.
*** The @<namespace>@ element defines the namespace of the extension to be configured.
*** The @<name>@ element defines the name of the extension to be configured.
*** The <@configuration>@ contains Extension specific configuration options (refer to the specific Extension for what the contents of this element should be.

The following sections define the common settings for each available graph type:

h2. TinkerGraph

A "TinkerGraph":http://wiki.github.com/tinkerpop/gremlin/tinkergraph would be configured as follows:

```xml
<graph>
  <graph-name>gratefulgraph</graph-name>
  <graph-type>tinkergraph</graph-type>
  <graph-location>data/graph-example-2</graph-location>
  <graph-mock-tx>true</graph-mock-tx>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.TinkerGraphGraphConfiguration</graph-type>
```

The @<graph-location>@ element contains the location of the TinkerGraph.  If this value is not specified, then the TinkerGraph will behave as an in-memory graph only.  The @</graph-mock-tx>@ element allows the TinkerGraph to behave as a "mock":https://github.com/tinkerpop/rexster/blob/master/src/main/java/com/tinkerpop/rexster/util/MockTinkerTransactionalGraph.java @TransactionalGraph@.  This implementation is *NOT* actually transactional.  It is for testing purposes only.

h2. Neo4j

A "Neo4j":http://neo4j.org/ graph would be configured as follows:

```xml
<graph>
  <graph-name>neo4jsample</graph-name>
  <graph-type>neo4jgraph</graph-type>
  <graph-location>/tmp/rexster-graph</graph-location>
  <extensions>...</extensions>
  <properties>
    <!-- Memory mapped I/O settings -->
    <!-- For high traversal speed it is important to have the nodestore.db and relationshipstore.db files. -->
    <neostore.nodestore.db.mapped_memory>285M</neostore.nodestore.db.mapped_memory>
    <neostore.relationshipstore.db.mapped_memory>285M</neostore.relationshipstore.db.mapped_memory>
    <neostore.propertystore.db.mapped_memory>100M</neostore.propertystore.db.mapped_memory>
    <neostore.propertystore.db.strings.mapped_memory>100M</neostore.propertystore.db.strings.mapped_memory>
    <neostore.propertystore.db.arrays.mapped_memory>10M</neostore.propertystore.db.arrays.mapped_memory>
    <neostore.propertystore.db.index.mapped_memory>10M</neostore.propertystore.db.index.mapped_memory>
    <neostore.propertystore.db.index.keys.mapped_memory>10M</neostore.propertystore.db.index.keys.mapped_memory>
    ...
    </properties>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.Neo4jGraphConfiguration</graph-type>
```

The @<properties>@ element contains neo4j specific configuration values.  Any entries placed here will be converted to name/value pairs to be passed into neo4j for its configuration.  Set any properties here as would have been done in a neo4j.properties file.

h3. Neo4j High Availability Cluster

The configuration for "Neo4j HA":http://wiki.neo4j.org/content/High_Availability_Cluster is quite similar to setting up a standard Neo4j configuration within Rexster.  Once a cluster is established, there are just two exceptions to consider when doing the Rexster-side configuration.

First, in the @<graph>@ element include the @<graph-high-availability>@ element to tell Rexster to use HA connectivity as follows:

```xml
<graph>
  <graph-name>neo4jsample</graph-name>
  <graph-type>neo4jgraph</graph-type>
  <graph-location>/tmp/rexster-graph</graph-location>
  <graph-high-availability>true</graph-high-availability>
  ...
</graph>
```

If this element is not present, Rexster assumes this value to be false.

Second, include the Neo4j HA settings in the @<properties>@ section:

```xml
<graph>
  ...
  <properties>
    <neostore.nodestore.db.mapped_memory>285M</neostore.nodestore.db.mapped_memory>
    <neostore.relationshipstore.db.mapped_memory>285M</neostore.relationshipstore.db.mapped_memory>
    <neostore.propertystore.db.mapped_memory>100M</neostore.propertystore.db.mapped_memory>
    ...
    <ha.machine_id>1</ha.machine_id>
    <ha.server>localhost:6001</ha.server>
    <ha.zoo_keeper_servers>localhost:2181,localhost:2182,localhost:2183</ha.zoo_keeper_servers>
  </properties>
</graph>
```

You may need to provide the following dependencies to Rexster in the classpath:

```xml
<dependency>
  <groupId>org.neo4j</groupId>
  <artifactId>neo4j-ha</artifactId>
  <version>1.3</version>
</dependency>
<dependency>
  <groupId>org.neo4j</groupId>
  <artifactId>neo4j-management</artifactId>
  <version>1.3</version>
</dependency>
```

h2. Sail

There are several "Sail":http://www.openrdf.org/doc/sesame2/2.3.0/users/ch08.html configurations available: Memory Store, Native Store and SPARQL Repository.

h3. Memory Store

```xml
<graph>
  <graph-name>sailsample</graph-name>
  <graph-type>memorystoresailgraph</graph-type>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.MemoryStoreSailGraphConfiguration</graph-type>
```

h3. Native Store Sail Graph

```xml
<graph>
  <graph-name>sailsample</graph-name>
  <graph-type>nativestoresailgraph</graph-type>
  <graph-location>tmp/data/sail</graph-location>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.NativeStoreSailGraphConfiguration</graph-type>
```

The @<graph-location>@ element is location of the directory containing the Sail data which will be loaded to Rexster .  This value is a required element of configuration.

h3. SPARQL Repository Sail Graph

```xml
<graph>
  <graph-name>sailsample</graph-name>
  <graph-type>sparqlrepositorysailgraph</graph-type>
  <graph-location>http://dbpedia.org/sparql</graph-location>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.SparqlRepositorySailGraphConfiguration</graph-type>
```

The @<graph-location>@ element is URI to the SPARQL repository which will be loaded to Rexster .  This value is a required element of configuration.

h2. OrientDB

An "OrientDB":http://www.orientechnologies.com/ graph would be configured as follows:

```xml
<graph>
  <graph-name>orientdbsample</graph-name>
  <graph-type>orientgraph</graph-type>
  <graph-location>local:C:/data/graph/graph</graph-location>
  <extensions>...</extensions>
  <properties>
    <username>admin</username>
    <password>admin</password>
  </properties>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.OrientGraphConfiguration</graph-type>
```

The @<graph-location>@ element is the URI to the OrientDB database Rexster is expected to connect to.  The @<properties>@ element requires two elements @<username>@ and @<password>@ to access the OrientDB graph instance.  

TinkerPop does not officially support remote connections.

h2. DEX

A "DEX":http://www.sparsity-technologies.com/dex graph would be configured as follows:

```xml
<graph>
  <graph-name>dexsample</graph-name>
  <graph-type>dexgraph</graph-type>
  <graph-location>/tmp/graph.dex</graph-location>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.DexGraphConfiguration</graph-type>
```

The @<graph-location>@ element contains the path to the DEX file name.

h2. RexsterGraph

A "RexsterGraph":https://github.com/tinkerpop/blueprints/wiki/Rexster-Implementation graph would be configured as follows:

```xml
<graph>
  <graph-name>remotetinkergraph</graph-name>
  <graph-type>rexstergraph</graph-type>
  <graph-buffer-size>100</graph-buffer-size>
  <graph-location>http://remoterexsterserver:8182/tinkergraph</graph-location>
  <extensions>...</extensions>
</graph>
```

The @<graph-type>@ could also be explicitly specified as:

```text
<graph-type>com.tinkerpop.rexster.config.RexsterGraphGraphConfiguration</graph-type>
```

The @<graph-location>@ element contains the URI to the specific graph hosted within the remote Rexster instance.

The @<graph-buffer-size>@ element defines the buffer size property for the @RexsterGraph@.